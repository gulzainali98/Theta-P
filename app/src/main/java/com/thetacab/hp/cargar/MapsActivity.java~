package com.example.hp.thetacab;

import android.content.Intent;
import android.net.Uri;
import android.os.AsyncTask;
import android.support.annotation.NonNull;
import android.support.v4.app.FragmentActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;
import com.google.android.gms.auth.api.Auth;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.auth.api.signin.GoogleSignInResult;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.common.api.Status;
import com.google.android.gms.plus.Plus;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.AuthCredential;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.auth.GoogleAuthProvider;


import com.facebook.login.LoginManager;
import com.google.android.gms.auth.api.Auth;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.common.api.Status;
import com.google.android.gms.maps.CameraUpdate;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.LatLngBounds;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.Polyline;
import com.google.android.gms.maps.model.PolylineOptions;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;

public class MapsActivity extends FragmentActivity implements OnMapReadyCallback {

    private static final String TAG = "MapActivity" ;
    private GoogleMap mMap;
    FirebaseAuth mAuth;
    private FirebaseAuth.AuthStateListener mAuthListener;
    private Button launchAlertActivityButton;
    private Button signOutButton;
    private GoogleApiClient mGoogleApiClient;

    @Override
    public void onStop() {
        super.onStop();
        if (mAuthListener != null) {
            mAuth.removeAuthStateListener(mAuthListener);
        }
    }
    @Override
    public void onStart() {
        super.onStart();
        mAuth.addAuthStateListener(mAuthListener);

    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_maps);
        mAuth=FirebaseAuth.getInstance();
        // Obtain the SupportMapFragment and get notified when the map is ready to be used.
        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
                .findFragmentById(R.id.map);
        mapFragment.getMapAsync(this);
        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
                .requestIdToken(getString(R.string.default_web_client_id))
                .requestEmail()
                .build();
        mGoogleApiClient = new GoogleApiClient.Builder(this)
                .enableAutoManage(this /* FragmentActivity */, this /* OnConnectionFailedListener */)
                .addApi(Auth.GOOGLE_SIGN_IN_API, gso)
                .build();
        mAuthListener = new FirebaseAuth.AuthStateListener() {
            @Override
            public void onAuthStateChanged(@NonNull FirebaseAuth firebaseAuth) {
                FirebaseUser user = firebaseAuth.getCurrentUser();
                if (user != null) {
                    // User is signed in
                    Log.d(TAG, "onAuthStateChanged:signed_in:" + user.getUid());
                } else {
                    // User is signed out
                    Log.d(TAG, "onAuthStateChanged:signed_out");

                    Intent intent=new Intent(getApplicationContext(),SignInActivity.class);
                    startActivity(intent);
                }
                // ...
            }
        };
        ;

        launchAlertActivityButton=(Button) findViewById(R.id.launch_alert_activity);
        signOutButton=(Button) findViewById(R.id.sign_out);
        launchAlertActivityButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent=new Intent(getApplicationContext(),AlertActivity.class);
                startActivity(intent);
            }
        });
        signOutButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                FirebaseAuth.getInstance().signOut();
                LoginManager.getInstance().logOut();
                if (v.getId() == R.id.sign_out) {
                    if (mGoogleApiClient.isConnected()) {
                        Plus.AccountApi.clearDefaultAccount(mGoogleApiClient);
                        mGoogleApiClient.disconnect();
                        mGoogleApiClient.connect();
                    }
                }

                Intent intent=new Intent(getApplicationContext(),SignInActivity.class);
                startActivity(intent);
            }
        });
    }


    /**
     * Manipulates the map once available.
     * This callback is triggered when the map is ready to be used.
     * This is where we can add markers or lines, add listeners or move the camera. In this case,
     * we just add a marker near Sydney, Australia.
     * If Google Play services is not installed on the device, the user will be prompted to install
     * it inside the SupportMapFragment. This method will only be triggered once the user has
     * installed Google Play services and returned to the app.
     */
    @Override
    public void onMapReady(GoogleMap googleMap) {
        mMap = googleMap;

        Button getPathButton=(Button) findViewById(R.id.get_path_button);
        final EditText sourceET=(EditText) findViewById(R.id.source);
        final EditText destinationET=(EditText) findViewById(R.id.destination);
        getPathButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String source = sourceET.getText().toString().replaceAll(" ","+");
                String destination = destinationET.getText().toString().replaceAll(" ","+");
                String requestURL = "https://maps.googleapis.com/maps/api/directions/json?";
                String appendOrigin = "origin="+source;
                String appendDestination = "destination="+destination;
                String appendKey = "key="+"AIzaSyBvYoLWy8jBUCGHbrluliP7znK8TvId1XE";

                requestURL = requestURL + appendKey + "&" + appendOrigin + "&" + appendDestination;
                RequestTask requestTask=new RequestTask();
                requestTask.execute(requestURL);

            }
        });
        // Add a marker in Sydney and move the camera
        LatLng sydney = new LatLng(-34, 151);
        mMap.addMarker(new MarkerOptions().position(sydney).title("Marker in Sydney"));
        mMap.moveCamera(CameraUpdateFactory.newLatLng(sydney));
    }

    class RequestTask extends AsyncTask<String, String, CompletePathData> {

        @Override
        protected CompletePathData doInBackground(String... webAddresses) {
            return getPathFromURL(webAddresses[0]);
        }

        @Override
        protected void onPostExecute(CompletePathData result) {
            super.onPostExecute(result);
            // Instantiates a new Polyline object and adds points to define a rectangle
            ArrayList<PathSegment> resultRoute = result.getPathSegments();
            PolylineOptions pathOptions = new PolylineOptions();
            for(int i=0;i<resultRoute.size();i++){
                PathSegment currPathSegment = resultRoute.get(i);
                pathOptions.add(new LatLng(currPathSegment.getStartLocation().getLatitude(),currPathSegment.getStartLocation().getLongitude()));
                ArrayList<Location> polyline=currPathSegment.getPolyline();
                for(int j=0;j<polyline.size();j++){
                    pathOptions.add(new LatLng(polyline.get(j).getLatitude(),polyline.get(j).getLongitude()));
                }
                pathOptions.add(new LatLng(currPathSegment.getEndLocation().getLatitude(),currPathSegment.getEndLocation().getLongitude()));
            }
            // Get back the mutable Polyline
            Polyline polyline = mMap.addPolyline(pathOptions);
            // Create a LatLngBounds that includes Australia.
            LatLngBounds pathBounds = new LatLngBounds(
                    result.getSouthWestLatLng(), result.getNorthEastLatLng());

// Set the camera to the greatest possible zoom level that includes the
// bounds
            mMap.moveCamera(CameraUpdateFactory.newLatLngBounds(pathBounds, 0));
            mMap.addMarker(new MarkerOptions()
                    .position(result.getStartLocation())
                    .title("Start Location"));
            mMap.addMarker(new MarkerOptions()
                    .position(result.getEndLocation())
                    .title("End Location"));
            TextView totalDistanceTV=(TextView) findViewById(R.id.total_distance);
            TextView etaTV=(TextView) findViewById(R.id.eta);
            totalDistanceTV.setText(result.getTotalDistance());
            etaTV.setText(result.getEta());

            Log.v("DirectionPath",":::: "+ result.toString());
        }
    }
    public static CompletePathData getPathFromURL(String link){
        String responseString;
        CompletePathData completePathData = new CompletePathData();
        ArrayList<PathSegment> routeData=new ArrayList<>();
        try {
            URL url=new URL(link);
            HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();
            httpURLConnection.setRequestMethod("GET");
            httpURLConnection.connect();
            InputStream in = new BufferedInputStream(httpURLConnection.getInputStream());

            //now we have the string
            responseString = convertStreamToString(in);
            httpURLConnection.disconnect();


        } catch (MalformedURLException e) {
            responseString="MalformedURLError";
            e.printStackTrace();
        } catch (IOException e) {
            responseString="IOException";
            e.printStackTrace();
        }

        try {
            JSONObject resoponseObject = new JSONObject(responseString);
            JSONArray routesArray = resoponseObject.getJSONArray("routes");
            JSONObject routeObject = routesArray.getJSONObject(0);
            JSONArray legsArray = routeObject.getJSONArray("legs");
            JSONObject legObject = legsArray.getJSONObject(0);
            JSONArray stepsArray = legObject.getJSONArray("steps");
            for(int i=0;i<stepsArray.length();i++){
                Location startLocation;
                Location endLocation;
                ArrayList polyline;
                JSONObject stepObject = stepsArray.getJSONObject(i);
                JSONObject startLocationObject = stepObject.getJSONObject("start_location");
                JSONObject endLocationObject = stepObject.getJSONObject("end_location");
                JSONObject polylineObject = stepObject.getJSONObject("polyline");
                startLocation=new Location(startLocationObject.getDouble("lat"),startLocationObject.getDouble("lng"));
                endLocation=new Location(endLocationObject.getDouble("lat"),endLocationObject.getDouble("lng"));
                polyline=PolylineDecoder.decodePoly(polylineObject.getString("points"));
                routeData.add(new PathSegment(startLocation,endLocation,polyline));
            }
            JSONObject boundObject=routeObject.getJSONObject("bounds");
            JSONObject northEastObject=boundObject.getJSONObject("northeast");
            JSONObject southWestObject=boundObject.getJSONObject("southwest");
            Double northEastLat=northEastObject.getDouble("lat");
            Double northEastLong=northEastObject.getDouble("lng");
            Double southWestLat=southWestObject.getDouble("lat");
            Double southWestLong=southWestObject.getDouble("lng");

            LatLng northEastLatLng = new LatLng(northEastLat,northEastLong);
            LatLng southWestLatLng = new LatLng(southWestLat,southWestLong);

            JSONObject distanceObject=legObject.getJSONObject("distance");
            String totalDistance = distanceObject.getString("text");

            JSONObject durationObject=legObject.getJSONObject("duration");
            String totalDuration = durationObject.getString("text");

            JSONObject startLocationObject=legObject.getJSONObject("start_location");
            JSONObject endLocationObject=legObject.getJSONObject("end_location");

            LatLng startLatLng = new LatLng(startLocationObject.getDouble("lat"),startLocationObject.getDouble("lng"));
            LatLng endLatLng = new LatLng(endLocationObject.getDouble("lat"),endLocationObject.getDouble("lng"));

            completePathData= new CompletePathData(routeData,totalDistance,totalDuration,startLatLng,endLatLng,northEastLatLng,southWestLatLng);



        } catch (JSONException e) {
            e.printStackTrace();
        }

        Log.v("PathString"," "+responseString);
        return completePathData;
    }
    static String convertStreamToString(java.io.InputStream is) {
        java.util.Scanner s = new java.util.Scanner(is).useDelimiter("\\A");
        return s.hasNext() ? s.next() : "";
    }
}
